// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleInsertFieds   = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_time`", "`update_time`", "`is_delete`"), ",")
	roleUpdateFields = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`role_uuid`", "`create_time`", "`update_time`", "`is_delete`"), "=?,") + "=?"
)

type (
	roleModel interface {
		ListCount(ctx context.Context, args *RoleListArgs) (int64, error)
		ListData(ctx context.Context, args *RoleListArgs) (*[]Role, error)
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOneByRoleUuid(ctx context.Context, roleUuid string) (*Role, error)
		Update(ctx context.Context, newData *Role) error
		Delete(ctx context.Context, roleUuid string) error
		Options(ctx context.Context) (*[]RoleOption, error)
		RoleOptionsInRoleUUIDArray(ctx context.Context, roleUUIDArray *[]string) (*[]RoleOption, error)
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoleOption struct{
		RoleUUID string `db:"role_uuid"`
		RoleName string `db:"role_name"`
		Summary  string  `db:"summary"`
	}

	RoleListArgs struct {
		RoleName string
		Page int64
		PageSize int64
	}

	Role struct {
		Id         int64     `db:"id"`
		RoleUuid   string    `db:"role_uuid"`
		RoleName   string    `db:"role_name"`
		Summary    string    `db:"summary"`
		IsDelete   int64     `db:"is_delete"` // 是否删除: 0正常, 1删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (args *RoleListArgs) getListConditions () (where string, placeholder []interface{}) {
	where = "`is_delete` = 0"
	if args.RoleName != "" {
		where +=" and role_name like ?"
		placeholder = append(placeholder, args.RoleName + "%")
	}
	return
}

func (m *defaultRoleModel) ListCount(ctx context.Context, args *RoleListArgs) (count int64, err error) {
	var placeholder []interface{}
	where, placeholder := args.getListConditions()
	query := fmt.Sprintf("select count(*) as count from %s where %s limit 1", m.table, where)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}

	err = stmt.QueryRowCtx(ctx, &count, placeholder...)
	
	return
}

func (m *defaultRoleModel) ListData(ctx context.Context, args *RoleListArgs) (resp *[]Role, err error) {
	var placeholder []interface{}
	where, placeholder := args.getListConditions()
	offset:= (args.Page - 1) * args.PageSize
	placeholder = append(placeholder, args.PageSize, offset)
	query := fmt.Sprintf("select %s from %s where %s limit ? offset ?", roleRows, m.table, where)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}

	resp = new([]Role)
	err = stmt.QueryRowsCtx(ctx, resp, placeholder...)

	return resp, err
}

func (m *defaultRoleModel) Delete(ctx context.Context, roleUuid string) (err error) {
	
	query := fmt.Sprintf("update %s set `is_delete` = 1, `update_time` = ? where `role_uuid` = ?", m.table)
	
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}
	updateTime := time.Now().Local()
	res, err := stmt.ExecCtx(ctx, updateTime, roleUuid)

	if err != nil {
		return
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil{
		return
	}

	if rowsAffected == 0 {
		err = errors.New("no rows affected")
	}

	return err
}

func (m *defaultRoleModel) FindOneByRoleUuid(ctx context.Context, roleUuid string) (r *Role, err error) {
	query := fmt.Sprintf("select %s from %s where `role_uuid` = ? limit 1", roleRows, m.table)
	stmt, err := m.conn.PrepareCtx(ctx, query)
	if err !=nil{
		return
	}

	r = new(Role)
	err = stmt.QueryRowCtx(ctx, r, roleUuid)
	if err == sqlc.ErrNotFound {
		err = ErrNotFound
	}

	return
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (res sql.Result, err error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, roleInsertFieds)
	stmt, err := m.conn.PrepareCtx(ctx, query)
	if err !=nil{
		return
	}

	res, err = stmt.ExecCtx(ctx, data.RoleUuid, data.RoleName, data.Summary)

	return
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) (err error) {
	query := fmt.Sprintf("update %s set %s where `is_delete` = 0 and `role_uuid` = ?", m.table, roleUpdateFields)
	stmt, err := m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}

	req, err :=stmt.ExecCtx(ctx, newData.RoleName, newData.Summary, newData.RoleUuid)
	if err !=nil{
		return 
	}

	rowsAffected, err := req.RowsAffected()
	if err !=nil{
		return
	}

	if rowsAffected == 0 {
		err = errors.New("no rows affected")
	}
	return err
}


func (m *defaultRoleModel) Options(ctx context.Context) (options *[]RoleOption, err error) {
	query := fmt.Sprintf("select role_uuid, role_name, summary from %s where `is_delete` = 0", m.table)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}

	options = new([]RoleOption)
	err = stmt.QueryRowsCtx(ctx, options)
	return
}

func (m *defaultRoleModel) RoleOptionsInRoleUUIDArray(ctx context.Context, roleUUIDArray *[]string) (options *[]RoleOption, err error) {
	options = new([]RoleOption)
	if len(*roleUUIDArray) == 0 {
		return
	}
	uuids:= "("
	var placeholder []interface{}
	for i,roleUUID := range *roleUUIDArray {
		if i >0 {
			uuids += ", "
		}
		placeholder = append(placeholder, roleUUID)
		uuids += "?"
	}
	uuids += ")"
	query := fmt.Sprintf("select role_uuid, role_name, summary from %s where `is_delete` = 0 and role_uuid in %s", m.table, uuids)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err != nil {
		return
	}

	err = stmt.QueryRowsCtx(ctx, options, placeholder...)
	return
}