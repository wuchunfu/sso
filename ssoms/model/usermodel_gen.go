// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	insertFields = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`", "`status`", "`is_delete`"), ",")
	updateFields = strings.Join(stringx.Remove(userFieldNames, "`id`", "`uuid`", "`create_time`"), "=?,") + "=?"

	cacheUserIdPrefix   = "cache:user:id:"
	cacheUserUuidPrefix = "cache:user:uuid:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByUuid(ctx context.Context, uuid string) (*User, error)
		Update(ctx context.Context, newData *User) error
		Delete(ctx context.Context, uuid string) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id         int64     `db:"id"`
		Uuid       string    `db:"uuid"`
		Avatar     string    `db:"avatar"`    // 头像
		Name       string    `db:"name"`      // 姓名
		Mobile     string    `db:"mobile"`    // 手机号
		Password   string    `db:"password"`  // 密码
		Gender     int64     `db:"gender"`    // 性别: 1男, 2女, 3未知
		Birth      time.Time `db:"birth"`     // 生日
		Status     int64     `db:"status"`    // 状态: 1正常
		IsDelete   int64     `db:"is_delete"` // 是否删除: 0正常, 1删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, uuid string) (err error) {
	userUuidKey := fmt.Sprintf("%s%v", cacheUserUuidPrefix, uuid)
	updateTime := time.Now()
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `is_delete`=1, `update_time`= ? where `uuid` = ?", m.table)
		return conn.ExecCtx(ctx, query, updateTime, uuid)
	}, userUuidKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUuid(ctx context.Context, uuid string) (*User, error) {
	userUuidKey := fmt.Sprintf("%s%v", cacheUserUuidPrefix, uuid)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	userUuidKey := fmt.Sprintf("%s%v", cacheUserUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, insertFields)
		return conn.ExecCtx(ctx, query, data.Uuid, data.Avatar, data.Name, data.Mobile, data.Password, data.Gender, data.Birth)
	}, userUuidKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) ( err error) {
	userUuidKey := fmt.Sprintf("%s%v", cacheUserUuidPrefix, newData.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `uuid` = ?", m.table, updateFields)
		return conn.ExecCtx(ctx, query, newData.Uuid, newData.Avatar, newData.Name, newData.Mobile, newData.Password, newData.Gender, newData.Birth, newData.Status, newData.IsDelete, newData.Id)
	}, userUuidKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
