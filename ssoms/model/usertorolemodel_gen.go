// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userToRoleFieldNames          = builder.RawFieldNames(&UserToRole{})
	userToRoleRows                = strings.Join(userToRoleFieldNames, ",")
	userToRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(userToRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userToRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(userToRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userToRoleModel interface {
		TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		FindAllRoleUUIDArrByUserUuid(ctx context.Context, userUuid string) (*[]string, error)
		Insert(ctx context.Context, data *UserToRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserToRole, error)
		FindOneByUserUuidRoleUuid(ctx context.Context, userUuid int64, roleUuid int64) (*UserToRole, error)
		Update(ctx context.Context, newData *UserToRole) error
		Delete(ctx context.Context, id int64) error
		TransDeleteByUserUUID(ctx context.Context, session sqlx.Session, uuid string, updateTime time.Time) error
	}

	defaultUserToRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserToRole struct {
		Id         int64     `db:"id"`
		UserUuid   int64     `db:"user_uuid"`
		RoleUuid   int64     `db:"role_uuid"`
		IsDelete   int64     `db:"is_delete"` // 是否删除: 0正常, 1删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUserToRoleModel(conn sqlx.SqlConn) *defaultUserToRoleModel {
	return &defaultUserToRoleModel{
		conn:  conn,
		table: "`user_to_role`",
	}
}

func (m *defaultUserToRoleModel) FindAllRoleUUIDArrByUserUuid(ctx context.Context, userUuid string) (roleUUIDArray *[]string, err error) {
	query := fmt.Sprintf("select `role_uuid` from %s where `user_uuid` = ?", m.table)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err!=nil {
		return
	}
	roleUUIDArray = new([]string)
	err = stmt.QueryRowCtx(ctx, &roleUUIDArray, userUuid)

	return
}

func (m *defaultUserToRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserToRoleModel) FindOne(ctx context.Context, id int64) (*UserToRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userToRoleRows, m.table)
	var resp UserToRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserToRoleModel) FindOneByUserUuidRoleUuid(ctx context.Context, userUuid int64, roleUuid int64) (*UserToRole, error) {
	var resp UserToRole
	query := fmt.Sprintf("select %s from %s where `user_uuid` = ? and `role_uuid` = ? limit 1", userToRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userUuid, roleUuid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserToRoleModel) Insert(ctx context.Context, data *UserToRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userToRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserUuid, data.RoleUuid, data.IsDelete)
	return ret, err
}

func (m *defaultUserToRoleModel) Update(ctx context.Context, newData *UserToRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userToRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserUuid, newData.RoleUuid, newData.IsDelete, newData.Id)
	return err
}

// 提供给logic开启事务用
func (m *defaultUserToRoleModel) TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.conn.TransactCtx(ctx, func (ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultUserToRoleModel) TransDeleteByUserUUID(ctx context.Context, session sqlx.Session, uuid string, updateTime time.Time) (err error) {
	query := fmt.Sprintf("update %s set `is_delete`=1, `update_time`= ? where `user_uuid` = ?", m.table)
	stmt, err:= session.PrepareCtx(ctx, query)
	if err != nil{
		return
	}
	_, err = stmt.ExecCtx(ctx, updateTime, uuid)
	return
}
