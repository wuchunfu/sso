// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	objectFieldNames          = builder.RawFieldNames(&Object{})
	objectRows                = strings.Join(objectFieldNames, ",")
	objectRowsExpectAutoSet   = strings.Join(stringx.Remove(objectFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	objectRowsWithPlaceHolder = strings.Join(stringx.Remove(objectFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheObjectIdPrefix   = "cache:object:id:"
	cacheObjectUuidPrefix = "cache:object:uuid:"
)

type (
	objectModel interface {
		Insert(ctx context.Context, data *Object) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Object, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Object, error)
		Update(ctx context.Context, data *Object) error
		Delete(ctx context.Context, id int64) error
	}

	defaultObjectModel struct {
		sqlc.CachedConn
		table string
	}

	Object struct {
		Id         int64     `db:"id"`
		Uuid       string    `db:"uuid"`
		ObjectName string    `db:"object_name"`
		Identifier string    `db:"identifier"`
		Key        string    `db:"key"` // 操作对象的systemCode, 菜单的path, 操作的uri
		Sort       int64     `db:"sort"`
		Type       int64     `db:"type"`      // 类型: 1系统, 2菜单, 3操作(接口)
		SubType    int64     `db:"sub_type"`  // 子分类
		Extra      string    `db:"extra"`     // 扩展字段，建议封装成 JSON 字符串
		Icon       string    `db:"icon"`      // 图标
		Status     int64     `db:"status"`    // 状态
		Puuid      string    `db:"puuid"`     // 父级uuid
		TopKey     string    `db:"top_key"`   // 操作对象的所属systemCode
		IsDelete   int64     `db:"is_delete"` // 是否删除: 0正常, 1删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newObjectModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultObjectModel {
	return &defaultObjectModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`object`",
	}
}

func (m *defaultObjectModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	objectIdKey := fmt.Sprintf("%s%v", cacheObjectIdPrefix, id)
	objectUuidKey := fmt.Sprintf("%s%v", cacheObjectUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, objectIdKey, objectUuidKey)
	return err
}

func (m *defaultObjectModel) FindOne(ctx context.Context, id int64) (*Object, error) {
	objectIdKey := fmt.Sprintf("%s%v", cacheObjectIdPrefix, id)
	var resp Object
	err := m.QueryRowCtx(ctx, &resp, objectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", objectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectModel) FindOneByUuid(ctx context.Context, uuid string) (*Object, error) {
	objectUuidKey := fmt.Sprintf("%s%v", cacheObjectUuidPrefix, uuid)
	var resp Object
	err := m.QueryRowIndexCtx(ctx, &resp, objectUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", objectRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectModel) Insert(ctx context.Context, data *Object) (sql.Result, error) {
	objectIdKey := fmt.Sprintf("%s%v", cacheObjectIdPrefix, data.Id)
	objectUuidKey := fmt.Sprintf("%s%v", cacheObjectUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, objectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.ObjectName, data.Identifier, data.Key, data.Sort, data.Type, data.SubType, data.Extra, data.Icon, data.Status, data.Puuid, data.TopKey, data.IsDelete)
	}, objectIdKey, objectUuidKey)
	return ret, err
}

func (m *defaultObjectModel) Update(ctx context.Context, newData *Object) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	objectIdKey := fmt.Sprintf("%s%v", cacheObjectIdPrefix, data.Id)
	objectUuidKey := fmt.Sprintf("%s%v", cacheObjectUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, objectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uuid, newData.ObjectName, newData.Identifier, newData.Key, newData.Sort, newData.Type, newData.SubType, newData.Extra, newData.Icon, newData.Status, newData.Puuid, newData.TopKey, newData.IsDelete, newData.Id)
	}, objectIdKey, objectUuidKey)
	return err
}

func (m *defaultObjectModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheObjectIdPrefix, primary)
}

func (m *defaultObjectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", objectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultObjectModel) tableName() string {
	return m.table
}
