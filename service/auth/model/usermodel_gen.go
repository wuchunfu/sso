// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userUpdateFields = strings.Join(stringx.Remove(userFieldNames, "`id`", "uuid", "`create_time`", "`is_delete`"), "=?,") + "=?"
	userUpdateFieldsWithoutPassword = strings.Join(stringx.Remove(userFieldNames, "`id`", "uuid", "`create_time`", "`password`", "`salt`", "`is_delete`"), "=?,") + "=?"
)

type (
	userModel interface {
		FindOne(ctx context.Context, mobile string) (*User, error) // 用于登录匹配用户
		FindOneByUuid(ctx context.Context, uuid string) (*User, error)
		Update(ctx context.Context, newData *User) error
		Delete(ctx context.Context, uuid string) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserOption struct{
		UUID   string `db:"uuid"`
		Name   string `db:"name"`
		Avatar string `db:"avatar"`
	}

	UserListArgs struct {
		Name string
		Mobile string
		Page int64
		PageSize int64
	}

	UserFilterOptionsArgs struct {
		Name string
		Limit int64
	}

	User struct {
		Id         int64     `db:"id"`
		Uuid       string    `db:"uuid"`
		Avatar     string    `db:"avatar"`    // 头像
		Name       string    `db:"name"`      // 姓名
		Mobile     string    `db:"mobile"`    // 手机号
		Password   string    `db:"password"`  // 密码
		Salt       string    `db:"salt"`      // 密码盐
		Gender     int64     `db:"gender"`    // 性别: 1男, 2女, 3未知
		Birth      time.Time `db:"birth"`     // 生日
		Introduction string `db:"introduction"` // 简介
		Status     int64     `db:"status"`    // 状态: 1正常
		IsDelete   int64     `db:"is_delete"` // 是否删除: 0正常, 1删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}

)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, uuid string) (err error) {
	updateTime := time.Now().Local()
	query := fmt.Sprintf("update %s set `is_delete`=1, `update_time`= ? where `uuid` = ?", m.table)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err!=nil {
		return
	}

	res, err := stmt.ExecCtx(ctx, updateTime, uuid)
	if err!=nil {
		return
	}

	rowsAffected, err := res.RowsAffected()
	if err !=nil{
		return
	}

	if rowsAffected == 0 {
		err = errors.New("no rows affected")
	}

	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, mobile string) (u *User, err error) {
	query := fmt.Sprintf("select %s from %s where `mobile`= ? and `status`= 1 and `is_delete` = 0 limit 1", userRows, m.table)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err!=nil {
		return
	}
	u = new(User)
	err = stmt.QueryRowCtx(ctx, u, mobile)
	if err == sqlc.ErrNotFound {
		err = ErrNotFound
	}

	return
}

func (m *defaultUserModel) FindOneByUuid(ctx context.Context, uuid string) (u *User, err error) {
	query := fmt.Sprintf("select %s from %s where `is_delete` = 0 and `uuid` = ? limit 1", userRows, m.table)
	stmt, err:= m.conn.PrepareCtx(ctx, query)
	if err!=nil {
		return
	}
	u = new(User)
	err = stmt.QueryRowCtx(ctx, u, uuid)
	if err == sqlc.ErrNotFound {
		err = ErrNotFound
	}

	return
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) (err error) {
	var placeholder []interface{}
	now := time.Now().Local()
	query := fmt.Sprintf("update %s set %s where `is_delete` = 0 and `uuid` = ?", m.table, userUpdateFieldsWithoutPassword)
	if newData.Password != "" {
		query = fmt.Sprintf("update %s set %s where `is_delete` = 0 and `uuid` = ?", m.table, userUpdateFields)
		placeholder = append(placeholder, newData.Uuid, newData.Avatar, newData.Name, newData.Mobile, newData.Password, newData.Salt,newData.Gender, newData.Birth, newData.Introduction, newData.Status, now)
	} else {
		placeholder = append(placeholder, newData.Uuid, newData.Avatar, newData.Name, newData.Mobile, newData.Gender, newData.Birth, newData.Introduction, newData.Status, now)
	}
	placeholder = append(placeholder, newData.Uuid)
	stmt, err := m.conn.PrepareCtx(ctx, query)
	if err !=nil{
		return
	}

	res, err := stmt.ExecCtx(ctx, placeholder...)
	if err !=nil{
		return
	}

	rowsAffected, err := res.RowsAffected()
	if err !=nil{
		return
	}

	if rowsAffected == 0 {
		err = errors.New("no rows affected")
	}

	return err
}
