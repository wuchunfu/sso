// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	objectLogFieldNames          = builder.RawFieldNames(&ObjectLog{})
	objectLogRows                = strings.Join(objectLogFieldNames, ",")
	objectLogInsertFields   = strings.Join(stringx.Remove(objectLogFieldNames, "`id`", "`create_time`"), ",")
)

type (
	objectLogModel interface {
		Insert(ctx context.Context, data *ObjectLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ObjectLog, error)
	}

	defaultObjectLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ObjectLog struct {
		Id         int64     `db:"id"`
		ObjectUuid string    `db:"object_uuid"`
		UserUuid   string    `db:"user_uuid"`
		UserName   string    `db:"user_name"`
		Type       int64     `db:"type"`        // 类型: 1系统, 2菜单, 3操作(接口)
		LogType    int64     `db:"log_type"`    // 日志类型: 1添加, 2更新, 3删除
		LogSummary string    `db:"log_summary"` // 日志描述
		LogData    string    `db:"log_data"`    // 日志内容

		CreateTime time.Time `db:"create_time"`
	}
)

func newObjectLogModel(conn sqlx.SqlConn) *defaultObjectLogModel {
	return &defaultObjectLogModel{
		conn:  conn,
		table: "`object_log`",
	}
}

func (m *defaultObjectLogModel) FindOne(ctx context.Context, id int64) (*ObjectLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", objectLogRows, m.table)
	var resp ObjectLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultObjectLogModel) Insert(ctx context.Context, data *ObjectLog) (res sql.Result, err error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, objectLogInsertFields)
	stmt, err := m.conn.PrepareCtx(ctx, query)
	if err !=nil{
		return
	}

	res, err = stmt.ExecCtx(ctx, data.ObjectUuid, data.UserUuid, data.UserName, data.Type, data.LogType, data.LogSummary, data.LogData)

	return
}
